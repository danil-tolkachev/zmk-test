#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0,1,2,3,4,10,11,12,13,14,20,21,22,23,24,30,31,32 >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 5,6,7,8,9,15,16,17,18,19,25,26,27,28,29,33,34,35 >;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q         &kp W        &kp E        &kp R         &kp T                                             &kp Y      &kp U         &kp I        &kp O        &kp P
  &hml LCTRL A  &hml LALT S  &hml LGUI D  &hml LSHFT F  &kp G                                             &kp H      &hmr LSHFT J  &hmr LGUI K  &hmr LALT L  &hmr LCTRL SEMICOLON
  &kp Z         &kp X        &kp C        &kp V         &kp B                                             &kp N      &kp M         &kp COMMA    &kp DOT      &kp SQT
                                          &lt 3 DELETE  &mt LSHFT ESCAPE  &lt 2 BACKSPACE    &lt 1 SPACE  &kp ENTER  &kp TAB
            >;
        };

        nav {
            bindings = <
  &kp F9         &kp F10       &kp F11       &kp F12        &kp LC(GRAVE)                   &kp HOME  &kp PG_DN        &kp PG_UP     &kp END          &kp INS
  &hml LCTRL F5  &hml LALT F6  &hml LGUI F7  &hml LSHFT F8  &none                           &kp LEFT  &hmr LSHFT DOWN  &hmr LGUI UP  &hmr LALT RIGHT  &hmr LCTRL LCTRL
  &kp F1         &kp F2        &kp F3        &kp F4         &none                           &none     &none            &none         &none            &kp LC(FSLH)
                                             &trans         &trans         &trans    &none  &none     &none
            >;
        };

        sym {
            bindings = <
  &kp EXCL  &kp AT_SIGN  &kp HASH   &kp DLLR   &kp PRCNT                        &kp CARET    &kp AMPS  &none     &none     &kp QMARK
  &kp PLUS  &kp MINUS    &kp DOT    &kp COMMA  &kp EQUAL                        &kp LBKT     &kp LPAR  &kp RPAR  &kp RBKT  &kp DQT
  &kp FSLH  &kp STAR     &kp COLON  &kp SEMI   &kp UNDER                        &kp LBRC     &kp LT    &kp GT    &kp RBRC  &kp GRAVE
                                    &none      &none      &none    &lt 4 SPACE  &lt 3 ENTER  &kp TAB
            >;
        };

        nums {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        adj {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans  &trans        &trans        &trans            &trans
  &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &trans        &trans                          &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE        &trans
  &trans        &trans        &trans        &trans        &trans                          &trans  &kp K_PREV    &kp K_NEXT    &kp K_PLAY_PAUSE  &trans
                                            &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
