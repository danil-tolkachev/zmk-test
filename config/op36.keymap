#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 >;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };

        en {
            bindings = <&kp CAPSLOCK>;
            key-positions = <22 23>;
        };

        ru {
            bindings = <&kp LS(CAPS)>;
            key-positions = <2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W        &kp E         &kp R         &kp T                                      &kp Y        &kp U         &kp I         &kp O        &kp P
  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G                                      &kp H        &hmr RCTRL J  &hmr RSHFT K  &hmr LALT L  &hmr LGUI SEMICOLON
  &kp Z        &kp X        &kp C         &kp V         &kp B                                      &kp N        &kp M         &kp COMMA     &kp DOT      &kp SQT
                                          &kp DEL       &lt 4 ESC  &lt 3 BACKSPACE    &lt 1 ENTER  &lt 2 SPACE  &kp TAB
            >;
        };

        nav {
            bindings = <
  &kp LC(Q)  &kp LC(W)  &kp LC(LBKT)  &kp LC(RBKT)  &kp LC(GRAVE)                            &kp HOME      &kp PG_DN        &kp PG_UP      &kp END          &kp INS
  &kp LGUI   &kp LALT   &kp LSHFT     &kp LCTRL     &kp PRCNT                                &kp LEFT      &hmr RCTRL DOWN  &hmr RSHFT UP  &hmr LALT RIGHT  &hmr RGUI LC(BACKSPACE)
  &kp LC(Z)  &kp LC(X)  &kp LC(C)     &kp LC(V)     &kp LC(B)                                &kp LC(LEFT)  &none            &none          &kp LC(RIGHT)    &kp LC(FSLH)
                                      &trans        &lt 2 ESCAPE   &lt 5 BACKSPACE    &none  &none         &none
            >;
        };

        fn {
            bindings = <
  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5                     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10
  &sk LGUI  &sk LALT  &sk LSHFT  &sk LCTRL  &kp F11                    &kp F12  &sk RCTRL  &sk RSHFT  &sk LALT  &sk RGUI
  &trans    &trans    &trans     &trans     &trans                     &trans   &trans     &trans     &trans    &trans
                                 &trans     &trans   &trans    &trans  &trans   &trans
            >;
        };

        sym {
            bindings = <
  &kp GRAVE  &kp AT_SIGN  &kp HASH  &kp DLLR   &kp PRCNT                        &kp LBRC     &kp LBKT   &kp RBKT       &kp RBRC   &kp DQT
  &kp PLUS   &kp MINUS    &kp DOT   &kp COMMA  &kp EQUAL                        &kp EXCL     &kp LPAR   &kp RPAR       &kp COLON  &kp SEMICOLON
  &kp TILDE  &kp STAR     &kp PIPE  &kp AMPS   &kp BSLH                         &kp QMARK    &kp CARET  &kp LESS_THAN  &kp GT     &kp FSLH
                                    &none      &none      &none    &lt 5 ENTER  &lt 4 SPACE  &kp UNDER
            >;
        };

        nums {
            bindings = <
  &kp N1     &kp N2     &kp N3    &kp N4     &kp N5                     &kp N6     &kp N7     &kp N8         &kp N9     &kp N0
  &kp PLUS   &kp MINUS  &kp DOT   &kp COMMA  &kp EQUAL                  &kp EXCL   &kp LPAR   &kp RPAR       &kp COLON  &kp SEMICOLON
  &kp TILDE  &kp STAR   &kp PIPE  &kp AMPS   &kp BSLH                   &kp QMARK  &kp CARET  &kp LESS_THAN  &kp GT     &kp FSLH
                                  &none      &none      &none    &none  &none      &kp UNDER
            >;
        };

        adj {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans  &kp C_BRI_DN  &kp C_BRI_UP  &trans            &trans
  &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &trans        &trans                          &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE        &trans
  &trans        &trans        &trans        &trans        &trans                          &trans  &kp K_PREV    &kp K_NEXT    &kp K_PLAY_PAUSE  &trans
                                            &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
